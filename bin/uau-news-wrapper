#!/bin/sh
###############################################################
#
# Copyright(c) 2017-2025 steadfasterX <steadfasterX #AT# binbash |dot| rocks>
# License: GPLv3
#
# Part of: Unattended Arch Upgrade (uAu)
# cron job to inform you about new Arch updates and their news
#
############################################################################

# max retries
MAXCNT=20

# unattended upgrade config
UACONF=/etc/unattended-arch-upgrade.conf

##############################################################
export TERM=non-interactive

# source the necessary conf
if [ ! -f $UACONF ]; then
    echo "ERROR: MISSING $UACONF!!!" >&2
    exit 3
fi
# shellcheck disable=1090
. $UACONF

LOG="$NEWSLOG"
ELOG="$NEWSLOG.err"

> $LOG
> $ELOG

# set amount of comments for AUR packages
if [ "$BRIEFNEWSAUR" = 1 ]; then
    AURFETCHARGS="-n 1" # fetch the last comment
else
    AURFETCHARGS="-n $AURCOMMENTS" # fetch the last X comments
fi

# enforce a full refresh for repo and AUR - otherwise checkupdates will not show the real state..
# shellcheck disable=SC2086
$AURBIN $AURNEWSSYNCARG >> $ELOG 2>&1

# source the ignores of pacman config
[ -f "$PACCONF" ]&& PACIGN=$(grep -E "^IgnorePkg" "$PACCONF" | cut -d "=" -f 2)

# source the ignores of unattended config
[ -f "$UAIGNORE" ] && UAIGN=$(grep -E "^IgnorePkg" "$UAIGNORE" | cut -d "=" -f 2)

#first adjust the filter
for filter in $PACIGN $UAIGN; do
    FILTER="${FILTER:+$FILTER|}$filter"
done

# using checkupdates & checkupdates-aur) to find available packages then filter with archnews for relevant info
# within the Arch news feed for each package.
cat <<EOF >> "$LOG"
These binary packages can be upgraded on your machine ($(hostname)):
---------------------------------------------------------------------------

EOF
for cu in $($PACBIN -Qu 2>> "$ELOG" | tr " " "|"); do
    unset PKG

    if [ -z "$FILTER" ]; then
        PKG=$cu
    else
        PKG=$(echo "${cu}" | grep -Evi "($FILTER)")
    fi
    SPKG=${PKG%%|*}

    if [ "$BRIEFNEWS" = 1 ]; then
        FPKG=$SPKG
    else
        FPKG=$(echo "$PKG" | tr "|" " ")
    fi

    # make a list of all packages
    if [ -n "$PKG" ]; then
        SPKGLIST=${SPKGLIST:+$SPKGLIST }$SPKG
        if [ "$BRIEFNEWS" = 1 ]; then
            PKGLIST="${PKGLIST:+$PKGLIST,}$FPKG"
        else
            PKGLIST="${PKGLIST:+$PKGLIST\n}$FPKG"
        fi
    fi
done
# now send the package summary to the log
echo -e "$PKGLIST" >> "$LOG" 2>> $ELOG
cat <<EOF >> "$LOG"

EOF

# query arch news for each pkg
# this can easily get hit by a request rate limit
CNT=0
while [ $MAXCNT -gt $CNT ];do
    #echo "$ANEWSPKGBIN $ANEWSPKGARGS -p $SPKGLIST"
    $ANEWSPKGBIN $ANEWSPKGARGS -p $SPKGLIST >> $LOG 2>> $ELOG
    if [ $? -ne 0 ];then
        echo "rate limit exceeded?"
        $ANEWSPKGBIN $ANEWSPKGARGS -p $SPKGLIST --debug 2>&1 | grep -q "429"
        if [ $? -eq 0 ];then
            echo "yes, rate limit exceeded! retrying in 45 secs.."
            CNT=$((CNT + 1))
            sleep 45
        else
            echo "$ANEWSPKGBIN: unusual error occured during news fetching" >> $LOG
            $ANEWSPKGBIN $ANEWSPKGARGS -p $SPKGLIST --debug >> $ELOG 2>&1
            break
        fi
    else
        break
    fi
done

if [ "$DISABLE_AURCHECK" != "yes" ];then
    cat <<EOF >> "$LOG"


These AUR packages can be upgraded on your machine ($(hostname)):
---------------------------------------------------------------------------

EOF
    # shellcheck disable=SC2086
    # FIXME: calling AURBIN does not respect the global LC_ALL=C !?
    for cuaur in $($AURBIN $AURARGS_CHKUPGRADE 2>> "$ELOG" | grep -Ev "ermeide|avoid" | sort -u | tr " " "|"); do
        unset FPKG PKG
        FPKG=$(echo "$cuaur" |tr "|" " ")
        PKG=$(echo "${cuaur%%|*}" | grep -Evi "($FILTER)")
        if [ -n "$PKG" ]; then
            echo "$FPKG" >> $LOG
            $AURFETCH $AURFETCHARGS $PKG 2>> $ELOG \
                | grep -Ev '^\s*$' \
                | sed 's/\[[0-9]*m//g' 2>> $ELOG >> $LOG
        fi
    done
    NINF="with args: $ANEWSARGS"
fi

cat <<EOF >> "$LOG"


Latest Arch News feed ($ANEWSARGS):
---------------------------------------------------------------------------

EOF
$ANEWSBIN $ANEWSARGS >> $LOG 2>> $ELOG

if [ "$AUTOUPGRADE" == "I-UNDERSTAND-THAT-THIS-COULD-BREAK-MY-SYSTEM" ]; then
    UPGRADECONF="$UAUON"
else
    UPGRADECONF="$UAUOFF"
fi

# only send an email when wanted by the user and not called by unattended upgrade
if [ "$NEWSMAIL" = yes ] && [ -z "$UA" ]; then
    cat <<EOF \
        | $MAILBIN \
            -r "$FROM" \
            -s "Arch Update Information for $(hostname)" \
            "$TO"
$(date)
$(echo -e "$UPGRADECONF")

$(cat "$LOG")

EOF
fi
